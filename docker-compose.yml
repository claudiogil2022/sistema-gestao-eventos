

services:
  # Serviço para o Banco de Dados PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: event_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpassword
    ports:
      - "5432:5432" # Mapeia a porta do host para a porta do contêiner
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d event_db"] # Usando os valores fixos
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - event_network # Conecta à rede dedicada

  # Serviço para o Backend (Spring Boot)
  backend:
    build: ./backend # Constrói a imagem a partir do Dockerfile na pasta 'backend'
    container_name: eventmanager_backend
    ports:
      - "8080:8080" # Mapeia a porta do host (8080) para a porta do contêiner (8080)
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/event_db # Nome do serviço 'db'
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: adminpassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # ou create, create-drop, none
      SPRING_FLYWAY_ENABLED: true # ou false se não usar Flyway
      SERVER_PORT: 8080 # Garante que o Spring Boot escute na porta 8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - event_network # Conecta à rede dedicada
    restart: always

  # Serviço para o Frontend (Angular)
  frontend:
    build: ./frontend # Constrói a imagem a partir do Dockerfile na pasta 'frontend'
    container_name: eventmanager_frontend
    ports:
      - "4200:80" # Mapeia a porta do host (4200) para a porta 80 do Nginx
    environment:
      # A base URL da API para o frontend.
      # Para comunicação interna entre containers, use o nome do serviço 'backend'.
      # Para acesso do host via navegador, você usaria 'http://localhost:8080'.
      # No Dockerfile do frontend ou na configuração do Angular, você deve decidir
      # como a URL da API é injetada no build final. Para o Nginx, configure um proxy.
      ANGULAR_API_BASE_URL: http://backend:8080 # Exemplo para comunicação inter-contêiner
    depends_on:
      backend:
        condition: service_started
    networks:
      - event_network # Conecta à rede dedicada
    restart: always

# Volumes para persistência de dados
volumes:
  postgres_data:

# Rede dedicada para os serviços
networks:
  event_network:
    driver: bridge